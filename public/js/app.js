// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  app = angular.module('app', ['restangular', 'ngResource', 'ui.state', 'ui.highlight', 'ui.bootstrap.buttons', 'ui.select2']);

  app.config(function($routeProvider, $stateProvider, $urlRouterProvider, $provide, $locationProvider) {
    $routeProvider.otherwise('/');
    return $stateProvider.state('home', {
      url: '/',
      templateUrl: '/template/home.html',
      controller: 'HomeController'
    }).state('user', {
      url: '/user',
      templateUrl: '/template/user/list.html',
      controller: 'UserController'
    }).state('user.new', {
      url: '/new',
      templateUrl: '/template/user/new.html',
      controller: 'UserController'
    }).state('user.edit', {
      url: '/:id/edit',
      templateUrl: '/template/user/edit.html',
      controller: 'UserController'
    }).state('item', {
      url: '/item',
      templateUrl: '/template/item/list.html',
      controller: 'ItemController'
    }).state('item.new', {
      url: '/new',
      templateUrl: '/template/item/new.html',
      controller: 'ItemController'
    }).state('supplier', {
      url: '/supplier',
      templateUrl: '/template/supplier/list.html',
      controller: 'SupplierController'
    }).state('supplier.new', {
      url: '/new',
      templateUrl: '/template/supplier/new.html',
      controller: 'SupplierController'
    }).state('customer', {
      url: '/customer',
      templateUrl: '/template/customer/list.html',
      controller: 'CustomerController'
    }).state('customer.new', {
      url: '/new',
      templateUrl: '/template/customer/new.html',
      controller: 'CustomerController'
    }).state('purchase_invoice', {
      url: '/invoice/purchase',
      templateUrl: '/template/invoice/purchase/list.html',
      controller: 'PurchaseInvoiceController'
    }).state('sales_invoice', {
      url: '/invoice/sales',
      templateUrl: '/template/invoice/sales/list.html',
      controller: 'SalesInvoiceController'
    }).state('purchase_transaction', {
      url: '/transaction/purchase',
      templateUrl: '/template/transaction/purchase/new.html',
      controller: 'PurchaseTransactionController'
    }).state('sales_transaction', {
      url: '/transaction/sales',
      templateUrl: '/template/transaction/sales/new.html',
      controller: 'SalesTransactionController'
    }).state('statistic', {
      url: '/statistic',
      templateUrl: '/template/statistic/index.html',
      controller: 'StatisticController'
    });
  });

  app.run(function($rootScope, Restangular, AuthenticationService, SocketService) {
    Restangular.setBaseUrl('/api');
    Restangular.setRestangularFields({
      id: '_id'
    });
    if (location.pathname === '/login.html' && AuthenticationService.isLoggedIn()) {
      location.replace('/');
    }
    if (location.pathname !== '/login.html' && !AuthenticationService.isLoggedIn()) {
      return location.replace('/login.html');
    }
  });

  app.directive('activeLink', function($location) {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attribute) {
        return scope.$on('$stateChangeSuccess', function() {
          var linkPath, path;
          window.z = $location.path();
          path = '/' + $location.path().split('/')[1];
          linkPath = element.children('a').attr('href');
          if (path === linkPath.substr(2)) {
            return element.addClass('active');
          } else {
            return element.removeClass('active');
          }
        });
      }
    };
  });

  app.directive('buttonToggle', function() {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function($scope, element, attr, ngModel) {
        var classToToggle;
        classToToggle = attr.buttonToggle;
        element.bind('click', function() {
          var checked;
          checked = ngModel.$viewValue;
          return $scope.$apply(function(scope) {
            return ngModel.$setViewValue(!checked);
          });
        });
        return $scope.$watch(attr.ngModel, function(newValue, oldValue) {
          if (newValue) {
            return element.addClass(classToToggle);
          } else {
            return element.removeClass(classToToggle);
          }
        });
      }
    };
  });

  app.directive('confirmDelete', function() {
    return {
      restrict: 'E',
      scope: {
        deleteAction: '&ngClick'
      },
      template: "<span ng-hide=confirm>\n    <a href=\"javascript:void(0)\" ng-click=\"confirm = true\">Delete</a>\n</span>\n<span ng-show=confirm>\n    <a href=\"javascript:void(0)\" class=\"label label-danger\" ng-click=\"deleteAction()\">Yes</a>\n    <a href=\"javascript:void(0)\" class=\"label label-default\" ng-click=\"confirm = false\">No</a>\n</span>"
    };
  });

  app.directive('xeditable', function(FlashService, MomentService, SocketService, Restangular, currencyFilter, $timeout) {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function(scope, element, attr, ctrl) {
        var loadXeditable;
        loadXeditable = function() {
          return element.editable({
            showbuttons: false,
            emptytext: '-',
            ajaxOptions: {
              type: 'PATCH'
            },
            success: function(response, newValue) {
              if (attr.format === 'currency') {
                newValue = currencyFilter(newValue, 'IDR');
              }
              if (attr.nocommit == null) {
                return SocketService.emit("update:" + attr.category, {
                  field: attr.field,
                  name: response.name || response.username,
                  oldValue: element.text(),
                  newValue: newValue
                });
              }
            },
            error: function(response, newValue) {
              var _ref, _ref1;
              if (response.status === 500) {
                if (((_ref = response.responseJSON) != null ? _ref.code : void 0) === 11001) {
                  return FlashService.error("" + newValue + " sudah ada", MomentService.currentTime());
                } else if (((_ref1 = response.responseJSON) != null ? _ref1.name : void 0) === 'ValidationError') {
                  FlashService.error("" + attr.field + " tidak boleh kosong", MomentService.currentTime());
                  return element.editable('toggle');
                }
              }
            }
          });
        };
        return $timeout(function() {
          return loadXeditable();
        }, 10);
      }
    };
  });

  app.directive('chartPie', function() {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        items: '='
      },
      template: '<div style="height: 200px"></div>',
      link: function(scope, element, attrs) {
        var chart, idContainer, options;
        idContainer = attrs.id;
        element.find('div').attr('id', idContainer);
        options = {
          credits: {
            enabled: false
          },
          chart: {
            renderTo: idContainer,
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: null
          },
          title: {
            text: attrs.title
          },
          tooltip: {
            formatter: function() {
              return false;
            }
          },
          plotOptions: {
            pie: {
              cursor: 'pointer',
              dataLabels: {
                enabled: true,
                color: '#000',
                connectorColor: '#000',
                formatter: function() {
                  return "<b>" + this.point.name + "</b>\n<br />\n" + (this.percentage.toFixed()) + "%";
                }
              }
            }
          },
          series: [
            {
              type: 'pie',
              name: attrs.pieSubtitle,
              data: scope.items
            }
          ]
        };
        chart = new Highcharts.Chart(options);
        return scope.$watch('items', function(newVal) {
          return chart.series[0].setData(newVal, true);
        }, true);
      }
    };
  });

  app.directive('chartLine', function() {
    return {
      restrict: 'E',
      replace: true,
      scope: {
        items: '='
      },
      template: '<div style="height: 200px"></div>',
      link: function(scope, element, attrs) {
        var chart, idContainer, options;
        idContainer = attrs.id;
        element.find('div').attr('id', idContainer);
        options = {
          credits: {
            enabled: false
          },
          chart: {
            renderTo: idContainer,
            plotShadow: null
          },
          title: {
            text: attrs.title
          },
          tooltip: {
            shared: true,
            crosshairs: true,
            formatter: function() {
              return "<b>" + (moment(parseInt(this.x, 10)).format('D MMM YY')) + "</b> <br />\nBeli: Rp." + this.points[0].y + " <br />\nJual: Rp." + this.points[1].y;
            }
          },
          legend: {
            align: 'right',
            verticalAlign: 'top',
            y: 20,
            floating: true,
            borderWidth: 0
          },
          xAxis: {
            type: 'datetime',
            tickInterval: 24 * 3600 * 1000,
            dateTimeLabelFormats: {
              day: '%e %b %y'
            },
            labels: {
              align: 'center'
            }
          },
          yAxis: {
            title: {
              text: 'Total Transaksi (Rp.)'
            }
          },
          series: [
            {
              name: 'Beli',
              color: '#D9534F'
            }, {
              name: 'Jual',
              color: '#1f6377'
            }
          ]
        };
        chart = new Highcharts.Chart(options);
        return scope.$watch('items', function(newVal) {
          chart.series[0].setData(newVal[0].data, true);
          return chart.series[1].setData(newVal[1].data, true);
        });
      }
    };
  });

  app.directive('dateRangePicker', function() {
    return {
      restrict: 'A',
      replace: true,
      scope: {
        dateStart: '&',
        dateEnd: '&',
        ctrlDateStart: '=',
        ctrlDateEnd: '=',
        onChange: '&change'
      },
      template: "<div class=input-group>\n    <span class=input-group-addon>\n        <i class=\"glyphicon glyphicon-calendar\"></i>\n    </span>\n    <input id=daterangepicker\n           class=\"form-control readonly-fake\"\n           readonly\n           data-datestart=\"{{ dateStart }}\"\n           data-dateend=\"{{ dateEnd }}\"\n           value=\"{{ dateStart | date:'dd MMM y' }} - {{ dateEnd | date:'dd MMM y' }}\">\n    </input>\n</div>",
      link: function(scope, element, attrs) {
        scope.dateStart = moment().startOf('week').toISOString();
        scope.dateEnd = moment().toISOString();
        return element.find('#daterangepicker').daterangepicker({
          ranges: {
            'This week': [moment().startOf('week'), moment()],
            'This month': [moment().startOf('month'), moment()],
            'This year': [moment().startOf('year'), moment()]
          },
          startDate: moment().startOf('week'),
          endDate: moment(),
          maxDate: moment(),
          format: 'DD MMM YYYY',
          showDropdowns: true
        }, function(start, end) {
          scope.dateStart = start.add('day', 1).toISOString();
          scope.dateEnd = end.add('day', 1).toISOString();
          return scope.$apply(function() {
            return scope.onChange({
              dateStart: start,
              dateEnd: end,
              ctrlDateStart: start,
              ctrlDateEnd: end
            });
          });
        });
      }
    };
  });

  app.directive('formGroup', function() {
    return {
      template: "<div class=\"form-group\">\n    <label class=\"control-label\" for=\"\" />\n    <div class=\"controls\" ng-transclude />\n</div",
      replace: true,
      transclude: true,
      require: '^form',
      scope: {
        label: '@',
        size: '@'
      },
      link: function(scope, element) {
        var id;
        id = element.find(':input').attr('id');
        return scope["for"] = id;
      }
    };
  });

  app.filter('currency', function() {
    return function(number, currencyCode) {
      var chosenCurrency, currency;
      currency = {
        IDR: {
          sign: 'Rp',
          thousand: '.',
          decimal: ',',
          suffix: ',-'
        }
      };
      if (number) {
        chosenCurrency = currency[currencyCode];
        return accounting.formatMoney(number, chosenCurrency.sign, chosenCurrency.decimal, chosenCurrency.thousand) + chosenCurrency.suffix;
      } else {
        return '-';
      }
    };
  });

  app.filter('percent', function() {
    return function(number) {
      if (number) {
        return number + '%';
      } else {
        return '-';
      }
    };
  });

  app.factory('SessionService', function() {
    return {
      get: function(key) {
        return sessionStorage.getItem(key);
      },
      set: function(key, val) {
        return sessionStorage.setItem(key, val);
      },
      unset: function(key) {
        return sessionStorage.removeItem(key);
      }
    };
  });

  app.factory('AuthenticationService', function($rootScope, $location, $http, SessionService, FlashService) {
    return {
      login: function(credentials) {
        return $http.post('/auth/login', credentials).success(function(data) {
          if (data.length) {
            SessionService.set('authenticated', true);
            SessionService.set('username', credentials.username);
            SessionService.set('role', data[0].role);
            return location.replace('/');
          } else {
            return FlashService.error('Username atau password salah');
          }
        });
      },
      logout: function() {
        SessionService.unset('authenticated');
        SessionService.unset('username');
        return SessionService.unset('role');
      },
      isLoggedIn: function() {
        return SessionService.get('authenticated');
      },
      currentUser: function() {
        return SessionService.get('username');
      },
      currentRole: function() {
        return SessionService.get('role');
      }
    };
  });

  app.factory('FlashService', function($rootScope) {
    toastr.options.onclick = function() {
      return toastr.clear();
    };
    return toastr;
  });

  app.factory('MomentService', function($rootScope) {
    return {
      currentTime: function() {
        return moment().format('HH:mm:ss');
      }
    };
  });

  app.factory('SocketService', function($rootScope, $timeout) {
    var socket;
    socket = io.connect();
    return {
      on: function(eventName, callback) {
        return socket.on(eventName, function() {
          var args;
          args = arguments;
          return $timeout(function() {
            return callback.apply(socket, args);
          }, 0);
        });
      },
      emit: function(eventName, data, callback) {
        return socket.emit(eventName, data, function() {
          var args;
          args = arguments;
          if (callback) {
            return callback.apply(socket, args);
          }
        });
      },
      removeAllListeners: function() {
        return socket.removeAllListeners();
      }
    };
  });

  app.controller('CustomerController', function($scope, $routeParams, $location, Restangular, FlashService, MomentService, SocketService, filterFilter) {
    var customers, reload;
    customers = Restangular.all('customers');
    (reload = function() {
      return $scope.data = customers.getList();
    })();
    SocketService.on('create:customer', function(data) {
      FlashService.info("Pelanggan " + data.name + " telah ditambah", MomentService.currentTime());
      return reload();
    });
    SocketService.on('update:customer', function(data) {
      var message;
      message = "Pelanggan telah di-update <br />\nNama:    <strong>" + data.name + "</strong> <br />\nKolom:   <strong>" + data.field + "</strong> <br />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong>";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('delete:customer', function(data) {
      FlashService.info("Pelanggan " + data.name + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    $scope.add = function() {
      return customers.post($scope.customer).then(function(customer) {
        SocketService.emit('create:customer', customer);
        $scope.customer = {
          name: '',
          address: '',
          contact: ''
        };
        return angular.element('#name').focus();
      }, function(err) {
        if (err.status === 500) {
          if (err.data.code === 11000) {
            return FlashService.error('Nama pelanggan sudah ada', MomentService.currentTime());
          }
        }
      });
    };
    $scope.remove = function(id) {
      return Restangular.one('customers', id).remove().then(function(customer) {
        return SocketService.emit('delete:customer', customer);
      });
    };
    $scope.$watch('showNewForm', function(val) {
      if ($scope.showNewForm) {
        return $location.path('/customer/new');
      } else {
        return $location.path('/customer');
      }
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('HomeController', function($scope, $routeParams, $location, SocketService) {});

  app.controller('ItemController', function($scope, $routeParams, $location, Restangular, FlashService, MomentService, SocketService, filterFilter) {
    var items, reload;
    items = Restangular.all('items');
    (reload = function() {
      $scope.data = items.getList();
      return $scope.suppliers = Restangular.all('suppliers').getList();
    })();
    SocketService.on('create:item', function(data) {
      var message;
      message = "Barang " + data.name + " telah ditambah";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('update:item', function(data) {
      var message;
      message = "Barang telah di-update <br />\nNama:    <strong>" + data.name + "</strong> <br />\nKolom:   <strong>" + data.field + "</strong> <br />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong>";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('delete:item', function(data) {
      FlashService.info("Barang " + data.name + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    SocketService.on('create:purchase_invoice', function(data) {
      return reload();
    });
    SocketService.on('delete:purchase_invoice', function(data) {
      return reload();
    });
    SocketService.on('create:sales_invoice', function(data) {
      return reload();
    });
    SocketService.on('delete:sales_invoice', function(data) {
      return reload();
    });
    $scope.watchStock = function(index) {
      var _ref;
      return {
        'danger': !$scope.data.$$v[index].stock,
        'warning': (0 < (_ref = $scope.data.$$v[index].stock) && _ref < 5)
      };
    };
    $scope.add = function() {
      if ($scope.item.purchase_price >= $scope.item.sales_price) {
        return FlashService.error('Harga jual harus lebih besar dari harga beli', MomentService.currentTime());
      } else {
        return items.post($scope.item).then(function(item) {
          SocketService.emit('create:item', item);
          $scope.item = {
            purchase_price: 1,
            sales_price: 1
          };
          return angular.element('#name').focus();
        }, function(err) {
          if (err.status === 500) {
            if (err.data.code === 11000) {
              return FlashService.error('Nama barang sudah ada', MomentService.currentTime());
            }
          }
        });
      }
    };
    $scope.remove = function(id) {
      return Restangular.one('items', id).remove().then(function(item) {
        return SocketService.emit('delete:item', item);
      });
    };
    $scope.$watch('showNewForm', function(val) {
      if ($scope.showNewForm) {
        return $location.path('/item/new');
      } else {
        return $location.path('/item');
      }
    });
    /*
    $scope.$watch 'search', (val) ->
        $scope.filteredData = filterFilter($scope.data, val)
    
        if val isnt undefined
            SocketService.emit 'search:item', $scope.filteredData.length
    
    $scope.$on '$routeChangeStart', (scope, next, current) ->
        SocketService.emit 'search:item', $scope.data.length
    */

    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('LoginController', function($scope, AuthenticationService) {
    $scope.credentials = {
      username: '',
      password: ''
    };
    return $scope.login = function() {
      return AuthenticationService.login($scope.credentials);
    };
  });

  app.controller('MenuController', function($scope, Restangular, AuthenticationService, FlashService, MomentService, SocketService) {
    $scope.activeLink = 'item';
    $scope.isLoggedIn = AuthenticationService.isLoggedIn();
    $scope.currentUser = AuthenticationService.currentUser();
    $scope.currentRole = AuthenticationService.currentRole();
    $scope.logout = function() {
      return AuthenticationService.logout();
    };
    $scope.notifications = [];
    $scope.newNotification = true;
    $scope.removeNewNotificationStatus = function() {
      return $scope.newNotification = false;
    };
    $scope.clearAllNotification = function() {
      return $scope.notifications.splice(0);
    };
    $scope.onlyFor = function(arr) {
      if (_.contains(arr, $scope.currentRole)) {
        return true;
      } else {
        return false;
      }
    };
    SocketService.on('create:item', function(data) {
      $scope.newNotification = true;
      return Restangular.one('suppliers', data.suppliers).getList().then(function(supplier) {
        return $scope.notifications.push({
          date: MomentService.currentTime(),
          labelAction: 'label-info',
          msg: "" + $scope.currentUser + " menambah barang " + data.name,
          detail: "Nama:       <strong>" + data.name + "</strong> <br />\nHarga Beli: <strong>" + data.purchase_price + "</strong> <br />\nHarga Jual: <strong>" + data.sales_price + "</strong> <br />\nPemasok:    <strong>" + supplier.name + "</strong> <br />"
        });
      });
    });
    SocketService.on('update:item', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-warning',
        msg: "" + $scope.currentUser + " mengedit barang " + data.name,
        detail: "<strong>" + data.field + "</strong> <br />\n<li class=divider />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong> <br />"
      });
    });
    SocketService.on('delete:item', function(data) {
      $scope.newNotification = true;
      return Restangular.one('suppliers', data.suppliers).getList().then(function(supplier) {
        return $scope.notifications.push({
          date: MomentService.currentTime(),
          labelAction: 'label-danger',
          msg: "" + $scope.currentUser + " menghapus barang " + data.name,
          detail: "Nama:       <strong>" + data.name + "</strong> <br />\nStok:       <strong>" + data.stock + "</strong> <br />\nHarga Beli: <strong>" + data.purchase_price + "</strong> <br />\nHarga Jual: <strong>" + data.sales_price + "</strong> <br />\nPemasok:    <strong>" + supplier.name + "</strong> <br />"
        });
      });
    });
    SocketService.on('create:supplier', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-info',
        msg: "" + $scope.currentUser + " menambah pemasok " + data.name,
        detail: "Nama:   <strong>" + data.name + "</strong> <br />\nAlamat: <strong>" + data.address + "</strong> <br />\nKontak: <strong>" + data.contact + "</strong>"
      });
    });
    SocketService.on('update:supplier', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-warning',
        msg: "" + $scope.currentUser + " mengedit pemasok " + data.name,
        detail: "<strong>" + data.field + "</strong> <br />\n<li class=divider />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong> <br />"
      });
    });
    SocketService.on('delete:supplier', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-danger',
        msg: "" + $scope.currentUser + " menghapus pemasok " + data.name
      });
    });
    SocketService.on('create:customer', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-info',
        msg: "" + $scope.currentUser + " menambah pelanggan " + data.name,
        detail: "Nama:   <strong>" + data.name + "</strong> <br />\nAlamat: <strong>" + data.address + "</strong> <br />\nKontak: <strong>" + data.contact + "</strong>"
      });
    });
    SocketService.on('update:customer', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-warning',
        msg: "" + $scope.currentUser + " mengedit pelanggan " + data.name,
        detail: "<strong>" + data.field + "</strong> <br />\n<li class=divider />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong> <br />"
      });
    });
    SocketService.on('delete:customer', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-danger',
        msg: "" + $scope.currentUser + " menghapus pelanggan " + data.name
      });
    });
    SocketService.on('delete:purchase_invoice', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-danger',
        msg: "" + $scope.currentUser + " menghapus faktur pembelian " + data.code
      });
    });
    SocketService.on('delete:sales_invoice', function(data) {
      $scope.newNotification = true;
      return $scope.notifications.push({
        date: MomentService.currentTime(),
        labelAction: 'label-danger',
        msg: "" + $scope.currentUser + " menghapus faktur penjualan  " + data.code
      });
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('PurchaseInvoiceController', function($scope, $stateParams, Restangular, SocketService, FlashService, MomentService) {
    var clearCart, invoices, reload;
    $scope.suppliers = Restangular.all('suppliers').getList();
    $scope.items = Restangular.all('items').getList();
    invoices = Restangular.all('purchase_invoices');
    (reload = function() {
      return $scope.data = invoices.getList();
    })();
    clearCart = function() {
      $scope.code = '';
      $scope.supplier = '';
      return $scope.cart = [];
    };
    SocketService.on('delete:purchase_invoice', function(data) {
      FlashService.info("Faktur beli " + data.code + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    $scope.calculateTotalPrice = function(details) {
      var purchase_price, stock, sumZipped, zipped;
      stock = _.pluck(details, 'quantity');
      purchase_price = _.pluck(_.pluck(details, 'item'), 'purchase_price');
      zipped = _.zip(stock, purchase_price);
      sumZipped = _.map(zipped, function(z) {
        return z[0] * z[1];
      });
      return _.reduce(sumZipped, function(c, v) {
        return c + v;
      });
    };
    $scope.calculateTotalQty = function(details) {
      var stock;
      stock = _.pluck(details, 'quantity');
      return _.reduce(stock, function(c, v) {
        return c + v;
      });
    };
    $scope.remove = function(id) {
      return Restangular.one('purchase_invoices', id).remove().then(function(invoice) {
        return SocketService.emit('delete:purchase_invoice', invoice);
      });
    };
    $scope.collapseInvoice = {};
    $scope.itemlist = function(invoiceId) {
      return $scope.collapseInvoice[invoiceId] = !$scope.collapseInvoice[invoiceId];
    };
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('PurchaseTransactionController', function($scope, Restangular, FlashService, SocketService, MomentService) {
    var clearCart;
    $scope.cart = [];
    $scope.suppliers = Restangular.all('suppliers').getList();
    $scope.items = Restangular.all('items').getList();
    setInterval(function() {
      return $scope.$apply(function() {
        return $scope.datetime = (new Date()).toISOString();
      });
    }, 1000);
    clearCart = function() {
      $scope.code = '';
      $scope.supplier = '';
      return $scope.cart = [];
    };
    SocketService.on('create:purchase_invoice', function(data) {
      var message;
      message = "Faktur pembelian " + data.code + " telah ditambah <br />\nKlik <a href=\"/#/invoice/purchase\">disini</a> untuk melihat";
      FlashService.info(message, MomentService.currentTime());
      return clearCart();
    });
    $scope.addToCart = function() {
      var selectedItem;
      selectedItem = (_.where($scope.items.$$v, {
        _id: $scope.item
      }))[0];
      if (_.contains($scope.cart, selectedItem)) {
        return angular.element("[data-id='" + selectedItem._id + "']").focus();
      } else {
        return $scope.cart.push(selectedItem);
      }
    };
    $scope.updateTotal = function(index) {
      console.log(index);
      return $scope.cart[index].total = $scope.cart[index].qty * $scope.cart[index].purchase_price;
    };
    $scope.grandTotal = function() {
      var a, total;
      total = _.pluck($scope.cart, 'total');
      a = _.reduce(total, function(c, x) {
        return c + x;
      });
      return a;
    };
    $scope.clear = function(index) {
      return $scope.cart.splice(index, 1);
    };
    $scope.clearAll = function() {
      return $scope.cart.splice(0);
    };
    $scope.filteredItems = function() {
      return _.where($scope.items.$$v, {
        suppliers: {
          _id: $scope.supplier
        }
      });
    };
    return $scope.submit = function() {
      var invoice, items;
      items = _.map($scope.cart, function(cart) {
        return {
          item: _.values(_.pick(cart, '_id'))[0],
          quantity: _.values(_.pick(cart, 'qty'))[0]
        };
      });
      invoice = {
        created_at: $scope.datetime,
        code: $scope.code,
        supplier: $scope.supplier,
        details: items
      };
      Restangular.all('purchase_invoices').post(invoice).then(function(result) {
        return SocketService.emit('create:purchase_invoice', result);
      }, function(err) {
        if (err.status === 500) {
          if (err.data.code === 11000) {
            return FlashService.error('Kode faktur sudah ada', MomentService.currentTime());
          }
        }
      });
      return angular.element('#invoice_code').focus();
    };
  });

  app.controller('SalesInvoiceController', function($scope, $stateParams, Restangular, SocketService, FlashService, MomentService) {
    var clearCart, invoices, reload;
    $scope.customers = Restangular.all('customers').getList();
    $scope.items = Restangular.all('items').getList();
    invoices = Restangular.all('sales_invoices');
    (reload = function() {
      return $scope.data = invoices.getList();
    })();
    clearCart = function() {
      $scope.code = '';
      $scope.customer = '';
      return $scope.cart = [];
    };
    SocketService.on('delete:sales_invoice', function(data) {
      FlashService.info("Faktur jual " + data.code + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    $scope.calculateTotalPrice = function(details) {
      var sales_price, stock, sumZipped, zipped;
      stock = _.pluck(details, 'quantity');
      sales_price = _.pluck(_.pluck(details, 'item'), 'sales_price');
      zipped = _.zip(stock, sales_price);
      sumZipped = _.map(zipped, function(z) {
        return z[0] * z[1];
      });
      return _.reduce(sumZipped, function(c, v) {
        return c + v;
      });
    };
    $scope.calculateTotalQty = function(details) {
      var stock;
      stock = _.pluck(details, 'quantity');
      return _.reduce(stock, function(c, v) {
        return c + v;
      });
    };
    $scope.remove = function(id) {
      return Restangular.one('sales_invoices', id).remove().then(function(invoice) {
        return SocketService.emit('delete:sales_invoice', invoice);
      });
    };
    $scope.collapseInvoice = {};
    $scope.itemlist = function(invoiceId) {
      return $scope.collapseInvoice[invoiceId] = !$scope.collapseInvoice[invoiceId];
    };
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('SalesTransactionController', function($scope, Restangular, FlashService, SocketService, MomentService) {
    var clearCart;
    $scope.cart = [];
    $scope.customers = Restangular.all('customers').getList();
    $scope.items = Restangular.all('items').getList();
    setInterval(function() {
      return $scope.$apply(function() {
        return $scope.datetime = (new Date()).toISOString();
      });
    }, 1000);
    clearCart = function() {
      $scope.code = '';
      $scope.customer = '';
      $scope.discount = 0;
      return $scope.cart = [];
    };
    SocketService.on('create:sales_invoice', function(data) {
      var message;
      message = "Faktur penjualan " + data.code + " telah ditambah <br />\nKlik <a href=\"/#/invoice/sales\">disini</a> untuk melihat";
      FlashService.info(message, MomentService.currentTime());
      return clearCart();
    });
    $scope.addToCart = function() {
      var selectedItem;
      selectedItem = (_.where($scope.items.$$v, {
        _id: $scope.item
      }))[0];
      if (_.contains($scope.cart, selectedItem)) {
        return angular.element("[data-id='" + selectedItem._id + "']").focus();
      } else {
        if (selectedItem.stock === 0) {
          return FlashService.error("Stok " + selectedItem.name + " tidak tersedia");
        } else {
          return $scope.cart.push(selectedItem);
        }
      }
    };
    $scope.updateTotal = function(index) {
      console.log(index);
      return $scope.cart[index].total = $scope.cart[index].qty * $scope.cart[index].sales_price;
    };
    $scope.grandTotal = function() {
      var a, total;
      total = _.pluck($scope.cart, 'total');
      a = _.reduce(total, function(c, x) {
        return c + x;
      });
      return a;
    };
    $scope.clear = function(index) {
      return $scope.cart.splice(index, 1);
    };
    $scope.clearAll = function() {
      return $scope.cart.splice(0);
    };
    return $scope.submit = function() {
      var invoice, items;
      items = _.map($scope.cart, function(cart) {
        return {
          item: _.values(_.pick(cart, '_id'))[0],
          quantity: _.values(_.pick(cart, 'qty'))[0]
        };
      });
      invoice = {
        created_at: $scope.datetime,
        code: $scope.code,
        customer: $scope.customer,
        discount: $scope.discount,
        details: items
      };
      Restangular.all('sales_invoices').post(invoice).then(function(result) {
        return SocketService.emit('create:sales_invoice', result);
      }, function(err) {
        if (err.status === 500) {
          if (err.data.code === 11000) {
            return FlashService.error('Kode faktur sudah ada', MomentService.currentTime());
          }
        }
      });
      return angular.element('#invoice_code').focus();
    };
  });

  app.controller('StatisticController', function($scope, Restangular) {
    return Restangular.one('purchase/range').get().then(function(data) {
      var salesRatio, total;
      $scope.transaction = data;
      $scope.purchaseTotal = _.reduce(data[0].data, function(prev, key) {
        return prev + key.y;
      }, 0);
      $scope.salesTotal = _.reduce(data[1].data, function(prev, key) {
        return prev + key.y;
      }, 0);
      $scope.calcTotal = $scope.salesTotal - $scope.purchaseTotal;
      if ($scope.calcTotal < 0) {
        $scope.currencyStatus = 'Kerugian';
        $scope.calcTotal = Math.abs($scope.calcTotal);
      } else {
        $scope.currencyStatus = 'Keuntungan';
      }
      total = $scope.purchaseTotal + $scope.salesTotal;
      salesRatio = {
        purchase: $scope.purchaseTotal / total * 100,
        sales: $scope.salesTotal / total * 100
      };
      return $scope.asset = [
        {
          name: 'Beli',
          y: salesRatio.purchase,
          color: '#d9534f'
        }, {
          name: 'Jual',
          y: salesRatio.sales,
          color: '#1f6377'
        }
      ];
    });
  });

  app.controller('SupplierController', function($scope, $routeParams, $location, Restangular, FlashService, MomentService, SocketService, filterFilter) {
    var items, reload, suppliers;
    suppliers = Restangular.all('suppliers');
    items = Restangular.all('items');
    items.getList().then(function(x) {
      return $scope.itemsBySupplier = function(supplierId) {
        return _.where(x, {
          suppliers: {
            _id: supplierId
          }
        });
      };
    });
    (reload = function() {
      return $scope.data = suppliers.getList();
    })();
    SocketService.on('create:supplier', function(data) {
      var message;
      message = "Pemasok " + data.name + " telah ditambah";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('update:supplier', function(data) {
      var message;
      message = "Pemasok telah di-update <br />\nNama:    <strong>" + data.name + "</strong> <br />\nKolom:   <strong>" + data.field + "</strong> <br />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong>";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('delete:supplier', function(data) {
      FlashService.info("Pemasok " + data.name + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    $scope.watchStock = function(item) {
      var _ref;
      return {
        'danger': !item.stock,
        'warning': (0 < (_ref = item.stock) && _ref < 5)
      };
    };
    $scope.collapseSupplier = {};
    $scope.itemlist = function(supplierId) {
      return $scope.collapseSupplier[supplierId] = !$scope.collapseSupplier[supplierId];
    };
    $scope.add = function() {
      return suppliers.post($scope.supplier).then(function(supplier) {
        SocketService.emit('create:supplier', supplier);
        $scope.supplier = {
          name: '',
          address: '',
          contact: ''
        };
        return angular.element('#name').focus();
      }, function(err) {
        if (err.status === 500) {
          if (err.data.code === 11000) {
            return FlashService.error('Nama pemasok sudah ada', MomentService.currentTime());
          }
        }
      });
    };
    $scope.remove = function(id) {
      return Restangular.one('suppliers', id).remove().then(function(supplier) {
        return SocketService.emit('delete:supplier', supplier);
      });
    };
    $scope.$watch('showNewForm', function(val) {
      if ($scope.showNewForm) {
        return $location.path('/supplier/new');
      } else {
        return $location.path('/supplier');
      }
    });
    /*
    $scope.$watch 'search', (val) ->
        $scope.filteredData = filterFilter($scope.data, val)
    
        if val isnt undefined
            SocketService.emit 'search:supplier', $scope.filteredData?.length
    */

    $scope.$on('$routeChangeStart', function(scope, next, current) {
      return SocketService.emit('search:supplier', $scope.data.length);
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('UserController', function($scope, $routeParams, $location, Restangular, FlashService, MomentService, SocketService, SessionService, filterFilter) {
    var reload, users;
    users = Restangular.all('users');
    $scope.roles = [
      {
        value: 'Sales',
        text: 'Sales'
      }, {
        value: 'Manager',
        text: 'Manager'
      }, {
        value: 'Komisaris',
        text: 'Komisaris'
      }
    ];
    (reload = function() {
      return $scope.data = users.getList();
    })();
    $scope.hideCurrentUserInfo = function() {
      return function(data) {
        return data.username !== SessionService.get('username');
      };
    };
    SocketService.on('create:user', function(data) {
      FlashService.info("Username " + data.username + " telah ditambah", MomentService.currentTime());
      return reload();
    });
    SocketService.on('update:user', function(data) {
      var message;
      message = "Username telah di-update <br />\nNama:    <strong>" + data.name + "</strong> <br />\nKolom:   <strong>" + data.field + "</strong> <br />\nSebelum: <strong>" + data.oldValue + "</strong> <br />\nSesudah: <strong>" + data.newValue + "</strong>";
      FlashService.info(message, MomentService.currentTime());
      return reload();
    });
    SocketService.on('delete:user', function(data) {
      FlashService.info("Username " + data.username + " telah dihapus", MomentService.currentTime());
      return reload();
    });
    $scope.add = function() {
      return users.post($scope.user).then(function(user) {
        SocketService.emit('create:user', user);
        $scope.user = {
          username: '',
          password: ''
        };
        return angular.element('#username').focus();
      }, function(err) {
        if (err.status === 500) {
          if (err.data.code === 11000) {
            return FlashService.error('Username sudah ada', MomentService.currentTime());
          }
        }
      });
    };
    $scope.remove = function(id) {
      return Restangular.one('users', id).remove().then(function(user) {
        return SocketService.emit('delete:user', user);
      });
    };
    $scope.$watch('showNewForm', function(val) {
      if ($scope.showNewForm) {
        return $location.path('/user/new');
      } else {
        return $location.path('/user');
      }
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

}).call(this);
