// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  app = angular.module('app', ['ngResource', 'ui.highlight', 'ui.select2']);

  app.config(function($locationProvider, $routeProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      templateUrl: '/template/home.html',
      controller: 'HomeController'
    }).when('/item', {
      templateUrl: '/template/item/list.html',
      controller: 'ItemController'
    }).when('/item/new', {
      templateUrl: '/template/item/new.html',
      controller: 'ItemController'
    }).when('/item/:id', {
      templateUrl: '/template/item/edit.html',
      controller: 'ItemController'
    }).when('/supplier', {
      templateUrl: '/template/supplier/list.html',
      controller: 'SupplierController'
    }).when('/supplier/new', {
      templateUrl: '/template/supplier/new.html',
      controller: 'SupplierController'
    }).when('/supplier/:id', {
      templateUrl: '/template/supplier/edit.html',
      controller: 'SupplierController'
    }).when('/customer', {
      templateUrl: '/template/customer/list.html',
      controller: 'CustomerController'
    }).when('/customer/new', {
      templateUrl: '/template/customer/new.html',
      controller: 'CustomerController'
    }).when('/customer/:id', {
      templateUrl: '/template/customer/edit.html',
      controller: 'CustomerController'
    }).otherwise({
      redirectTo: '/'
    });
  });

  app.run(function($rootScope, $location, AuthenticationService, SocketService) {
    if (location.pathname === '/login.html' && AuthenticationService.isLoggedIn()) {
      location.replace('/');
    }
    return $rootScope.$on('$routeChangeStart', function(event, next, current) {
      if ($location.path() === '/' && !AuthenticationService.isLoggedIn()) {
        return location.replace('/login.html');
      }
    });
  });

  app.directive('activeLink', function($location) {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attribute) {
        return scope.$on('$routeChangeSuccess', function() {
          var path;
          path = '/' + $location.path().split('/')[1];
          if (path === element.children('a').attr('href')) {
            return element.addClass('active');
          } else {
            return element.removeClass('active');
          }
        });
      }
    };
  });

  app.directive('collapseTable', function() {
    return {
      restrict: 'A',
      scope: true,
      link: function(scope, element, attribute) {
        if (element.hasClass('label')) {
          return element.removeClass('label label-info');
        } else {
          return element.addClass('label label-info');
        }
      }
    };
  });

  app.filter('rupiah', function() {
    return function(string) {
      if (string) {
        return accounting.formatMoney(parseInt(string), 'Rp ', '.', '.') + ',-';
      } else {
        return '-';
      }
    };
  });

  app.factory('SessionService', function() {
    return {
      get: function(key) {
        return sessionStorage.getItem(key);
      },
      set: function(key, val) {
        return sessionStorage.setItem(key, val);
      },
      unset: function(key) {
        return sessionStorage.removeItem(key);
      }
    };
  });

  app.factory('AuthenticationService', function($rootScope, $location, $http, SessionService, FlashService) {
    return {
      login: function(credentials) {
        return $http.post('/auth/login', credentials).success(function(data) {
          if (data.length) {
            SessionService.set('authenticated', true);
            SessionService.set('username', credentials.username);
            SessionService.set('role', credentials.role);
            return location.replace('/');
          } else {
            return FlashService.error('Username atau password salah');
          }
        });
      },
      logout: function() {
        SessionService.unset('authenticated');
        SessionService.unset('username');
        return SessionService.unset('role');
      },
      isLoggedIn: function() {
        return SessionService.get('authenticated');
      },
      currentUser: function() {
        return SessionService.get('username');
      },
      currentRole: function() {
        return SessionService.get('role');
      }
    };
  });

  app.factory('CustomerResource', function($resource) {
    return $resource('/api/customers/:id', {
      id: '@_id'
    }, {
      update: {
        method: 'PUT'
      }
    });
  });

  app.factory('FlashService', function($rootScope) {
    $.noty.defaults = {
      timeout: 2500,
      theme: 'defaultTheme',
      dismissQueue: true,
      template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
      animation: {
        open: {
          height: 'toggle'
        },
        close: {
          height: 'toggle'
        },
        easing: 'swing',
        speed: 500
      },
      callback: function() {
        return {
          onShow: function() {},
          afterShow: function() {},
          onClose: function() {},
          afterClose: function() {}
        };
      }
    };
    return {
      info: function(message) {
        return noty({
          text: message,
          type: 'information',
          layout: 'bottom',
          closeWith: ['click', 'hover']
        });
      },
      error: function(message) {
        return noty({
          text: message,
          type: 'error',
          layout: 'bottom',
          closeWith: ['click', 'hover']
        });
      },
      confirm: function(message, callback) {
        return noty({
          text: message,
          type: 'confirm',
          layout: 'top',
          buttons: [
            {
              addClass: 'btn btn-primary',
              text: 'Yes',
              onClick: function($noty) {
                return $rootScope.$apply(function() {
                  callback();
                  return $noty.close();
                });
              }
            }, {
              addClass: 'btn btn-danger',
              text: 'No',
              onClick: function($noty) {
                return $noty.close();
              }
            }
          ]
        });
      }
    };
  });

  app.factory('ItemResource', function($resource) {
    return $resource('/api/items/:id', {
      id: '@_id'
    }, {
      update: {
        method: 'PUT'
      }
    });
  });

  app.factory('SocketService', function($rootScope, $timeout) {
    var socket;
    socket = io.connect();
    return {
      on: function(eventName, callback) {
        return socket.on(eventName, function() {
          var args;
          args = arguments;
          return $timeout(function() {
            return callback.apply(socket, args);
          }, 0);
        });
      },
      emit: function(eventName, data, callback) {
        return socket.emit(eventName, data, function() {
          var args;
          args = arguments;
          if (callback) {
            return callback.apply(socket, args);
          }
        });
      },
      removeAllListeners: function() {
        return socket.removeAllListeners();
      }
    };
  });

  app.factory('SupplierResource', function($resource) {
    return $resource('/api/suppliers/:id', {
      id: '@_id'
    }, {
      update: {
        method: 'PUT'
      }
    });
  });

  app.controller('CustomerController', function($scope, $routeParams, $location, FlashService, CustomerResource, SocketService, filterFilter) {
    var resource;
    resource = CustomerResource;
    resource.query(function(res) {
      return $scope.data = res;
    });
    SocketService.on('create:customer', function(data) {
      FlashService.info("Pelanggan " + data.name + " telah ditambah");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('update:customer', function(data) {
      FlashService.info("Pelanggan " + data.name + " telah diedit");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('delete:customer', function(data) {
      FlashService.info("Pelanggan " + data.name + " telah dihapus");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    $scope.load = function() {
      return resource.get({
        id: $routeParams.id
      }, function(res) {
        return $scope.customer = res;
      });
    };
    $scope.add = function() {
      return resource.save($scope.customer, function() {
        SocketService.emit('create:customer', $scope.customer);
        $scope.customer = {
          name: '',
          address: '',
          contact: ''
        };
        return ($('#name')).focus();
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.update = function() {
      return $scope.customer.$update(function() {
        SocketService.emit('update:customer', $scope.customer);
        return $location.path('/customer');
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.remove = function(id) {
      var customer;
      customer = _.where($scope.data, {
        _id: id
      })[0];
      return FlashService.confirm("Apakah Anda yakin untuk menghapus " + customer.name + "?", function() {
        return resource.remove({
          id: id
        }, function() {
          return SocketService.emit('delete:customer', customer);
        });
      });
    };
    $scope.$watch('search', function(val) {
      $scope.filteredData = filterFilter($scope.data, val);
      if (val !== void 0) {
        SocketService.emit('search:customer', $scope.filteredData.length);
        return console.log($scope.filteredData.length);
      }
    });
    $scope.$on('$routeChangeStart', function(scope, next, current) {
      return SocketService.emit('search:customer', $scope.data.length);
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('HomeController', function($scope, $routeParams, $location, SocketService) {});

  app.controller('ItemController', function($scope, $routeParams, $location, FlashService, ItemResource, SupplierResource, SocketService, filterFilter) {
    var resource;
    resource = ItemResource;
    resource.query(function(res) {
      return $scope.data = res;
    });
    SocketService.on('create:item', function(data) {
      FlashService.info("Barang " + data.name + " telah ditambah");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('update:item', function(data) {
      FlashService.info("Barang " + data.name + " telah diedit");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('delete:item', function(data) {
      FlashService.info("Barang " + data.name + " telah dihapus");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SupplierResource.query(function(res) {
      return $scope.suppliers = res;
    });
    $scope.stockStatus = {
      isEmpty: function(index) {
        return !$scope.data[index].stock;
      },
      isWarning: function(index) {
        var _ref;
        return (0 < (_ref = $scope.data[index].stock) && _ref < 5);
      }
    };
    $scope.load = function() {
      return resource.get({
        id: $routeParams.id
      }, function(res) {
        return $scope.item = res;
      });
    };
    $scope.add = function() {
      return resource.save($scope.item, function() {
        SocketService.emit('create:item', $scope.item);
        $scope.item = {
          stock: 1,
          purchase_price: 1,
          sales_price: 1
        };
        return ($('#name')).focus();
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.update = function() {
      return $scope.item.$update(function() {
        SocketService.emit('update:item', $scope.item);
        return $location.path('/item');
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.remove = function(id) {
      var item;
      item = _.where($scope.data, {
        _id: id
      })[0];
      return FlashService.confirm("Apakah Anda yakin untuk menghapus " + item.name + "?", function() {
        return resource.remove({
          id: id
        }, function() {
          return SocketService.emit('delete:item', item);
        });
      });
    };
    $scope.$watch('search', function(val) {
      $scope.filteredData = filterFilter($scope.data, val);
      if (val !== void 0) {
        return SocketService.emit('search:item', $scope.filteredData.length);
      }
    });
    $scope.$on('$routeChangeStart', function(scope, next, current) {
      return SocketService.emit('search:item', $scope.data.length);
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

  app.controller('LoginController', function($scope, AuthenticationService) {
    $scope.credentials = {
      username: '',
      password: ''
    };
    return $scope.login = function() {
      return AuthenticationService.login($scope.credentials);
    };
  });

  app.controller('MenuController', function($scope, AuthenticationService, ItemResource, SupplierResource, CustomerResource, SocketService) {
    var categories;
    $scope.isLoggedIn = AuthenticationService.isLoggedIn();
    $scope.currentUser = AuthenticationService.currentUser();
    $scope.currentRole = AuthenticationService.currentRole();
    $scope.logout = function() {
      return AuthenticationService.logout();
    };
    $scope.count = {};
    categories = [
      {
        resource: ItemResource,
        scopeName: 'item',
        event: ['connect', 'create:item', 'delete:item', 'search:item']
      }, {
        resource: SupplierResource,
        scopeName: 'supplier',
        event: ['connect', 'create:supplier', 'delete:supplier', 'search:supplier']
      }, {
        resource: CustomerResource,
        scopeName: 'customer',
        event: ['connect', 'create:customer', 'delete:customer', 'search:customer']
      }
    ];
    return categories.map(function(category) {
      return category.event.map(function(event) {
        return SocketService.on(event, function(data) {
          if (event.match(/^search:/) != null) {
            return $scope.count[category.scopeName] = data;
          } else {
            return category.resource.query(function(res) {
              return $scope.count[category.scopeName] = res.length;
            });
          }
        });
      });
    });
    /*
    
    SocketService.on 'connect', (data) ->
        ItemResource.query (res) -> $scope.count.item = res.length
        SupplierResource.query (res) -> $scope.count.supplier = res.length
        CustomerResource.query (res) -> $scope.count.customer = res.length
    
    # ITEM
    SocketService.on 'create:item', (data) ->
        ItemResource.query (res) ->
            $scope.count.item = res.length
    
    SocketService.on 'delete:item', (data) ->
        console.log 'oe'
        ItemResource.query (res) -> $scope.count.item = res.length
    
    SocketService.on 'search:item', (data) -> $scope.count.item = data
    
    # SUPPLIER
    SocketService.on 'create:supplier', (data) ->
        SupplierResource.query (res) -> $scope.count.supplier = res.length
    
    SocketService.on 'delete:supplier', (data) ->
        SupplierResource.query (res) -> $scope.count.supplier = res.length
    
    SocketService.on 'search:supplier', (data) -> $scope.count.supplier = data
    
    # CUSTOMER
    SocketService.on 'create:customer', (data) ->
        CustomerResource.query (res) -> $scope.count.customer = res.length
    
    SocketService.on 'delete:customer', (data) ->
        CustomerResource.query (res) -> $scope.count.customer = res.length
    
    SocketService.on 'search:customer', (data) -> $scope.count.customer = data
    */

  });

  app.controller('SupplierController', function($scope, $routeParams, $location, FlashService, SupplierResource, SocketService, filterFilter) {
    var resource;
    resource = SupplierResource;
    resource.query(function(res) {
      return $scope.data = res;
    });
    SocketService.on('create:supplier', function(data) {
      FlashService.info("Pemasok " + data.name + " telah ditambah");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('update:supplier', function(data) {
      FlashService.info("Pemasok " + data.name + " telah diedit");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    SocketService.on('delete:supplier', function(data) {
      FlashService.info("Pemasok " + data.name + " telah dihapus");
      return resource.query(function(res) {
        return $scope.data = res;
      });
    });
    $scope.load = function() {
      return resource.get({
        id: $routeParams.id
      }, function(res) {
        return $scope.supplier = res;
      });
    };
    $scope.itemlist = function(supplierId) {};
    $scope.add = function() {
      return resource.save($scope.supplier, function() {
        SocketService.emit('create:supplier', $scope.supplier);
        $scope.supplier = {
          name: '',
          address: '',
          contact: ''
        };
        return ($('#name')).focus();
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.update = function() {
      return $scope.supplier.$update(function() {
        SocketService.emit('update:supplier', $scope.supplier);
        return $location.path('/supplier');
      }, function(err) {
        if (err.status === 500) {
          return FlashService.error(err.data);
        }
      });
    };
    $scope.remove = function(id) {
      var supplier;
      supplier = _.where($scope.data, {
        _id: id
      })[0];
      return FlashService.confirm("Apakah Anda yakin untuk menghapus " + supplier.name + "?", function() {
        return resource.remove({
          id: id
        }, function() {
          return SocketService.emit('delete:supplier', supplier);
        });
      });
    };
    $scope.$watch('search', function(val) {
      var _ref;
      $scope.filteredData = filterFilter($scope.data, val);
      if (val !== void 0) {
        return SocketService.emit('search:supplier', (_ref = $scope.filteredData) != null ? _ref.length : void 0);
      }
    });
    $scope.$on('$routeChangeStart', function(scope, next, current) {
      return SocketService.emit('search:supplier', $scope.data.length);
    });
    return $scope.$on('$destroy', function(event) {
      return SocketService.removeAllListeners();
    });
  });

}).call(this);
